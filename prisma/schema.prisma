generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id               String     @id @default(cuid())
  title            String
  description      String?
  createdAt        DateTime   @default(now())
  timeLimitMinutes Int // time limit in minutes for the quiz
  questions        Question[]
}

model Question {
  id      String   @id @default(cuid())
  quizId  String
  text    String   @db.Text
  options Option[]
  order   Int // for ordering questions in a quiz

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Option {
  id         String  @id @default(cuid())
  questionId String
  text       String  @db.Text
  isCorrect  Boolean @default(false)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model PasswordResetAttempt {
  id           String    @id @default(cuid())
  email        String    @unique
  attempts     Int       @default(0)
  lastTried    DateTime
  timeoutUntil DateTime?
}
